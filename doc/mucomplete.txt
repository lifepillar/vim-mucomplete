*mucomplete.txt*	For Vim version 7.2	Last change: 2018 Aug 03

			|\/|| | _ _ ._ _ ._ | __|_ _                      ~
			|  ||_|(_(_)| | ||_)|(/_|_(/_                     ~
			                 |                                ~

Welcome to the world of fallback completion!

Author:  Lifepillar <https://github.com/lifepillar>
License: Public Domain

==============================================================================
CONTENTS						*mucomplete-contents*

	1.  Introduction ............. |mucomplete-introduction|
	2.  Requirements ............. |mucomplete-requirements|
	3.  Getting started .......... |mucomplete-howto|
	4.  Completion methods ....... |mucomplete-methods|
	5.  Path completion .......... |mucomplete-path-complete|
	6.  Spelling suggestions ..... |mucomplete-spel-complete|
	7.  Extending completions .... |mucomplete-extend-compl|
	8.  Commands ................. |mucomplete-commands|
	9.  Mappings ................. |mucomplete-mappings|
	10. Plugs .................... |mucomplete-plugs|
	11. Customization ............ |mucomplete-customization|
	12. Tips & tricks ............ |mucomplete-tips|
	13. Compatibility ............ |mucomplete-compatibility|
	14. Troubleshooting .......... |mucomplete-troubleshooting|
	15. Providing feedback ....... |mucomplete-feedback|
	16. Implementation details ... |mucomplete-internals|

==============================================================================
1. Introduction				 	*mucomplete-introduction*

MUcomplete is a minimalist autocompletion plugin.

MUcomplete does nothing more than typing some completion mappings for you,
either when you press <tab>/<s-tab> or automatically while you are typing. You
choose which completion methods to use and in which order, and MUcomplete does
the rest. It does no caching, no asynchronous computation, no intelligent
guessing. It just makes use of built-in Vim features.

==============================================================================
2. Requirements					*mucomplete-requirements*

MUcomplete requires Vim 7.2 compiled with |+insert_expand| and |+menu|.
Automatic completion is available in Vim 7.4.143 or later, although Vim
8.0.0283 or later is recommended.

MUcomplete is developed and tested on Vim 8.

==============================================================================
3. Getting started					*mucomplete-howto*

Mandatory Vim settings:
>
	set completeopt+=menuone
<
For automatic completion, if you use Vim 7.4.775 or later you also need one of
the following:
>
	set completeopt+=noselect
<
or
>
	set completeopt+=noinsert
<
Other recommended settings:
>
	set shortmess+=c    " Shut off completion messages
	set belloff+=ctrlg  " If Vim beeps during completion
<
Press <tab> in Insert mode to complete a word. This will sequentially trigger
the methods specified in |g:mucomplete#chains| until some results are found
(if any). You may use <s-tab> to try the same list of methods in reverse
order. For example, if the current completion chain is ["omni", "keyn"] (see
|mucomplete-methods|), then pressing <tab> will cause omni completion to be
attempted first, provided that 'omnifunc' is defined. If 'omnifunc' is not
defined or the omni completion function returns no results then MUcomplete
will fallback to local keyword completion ("keyn"). Pressing <s-tab> will
trigger keyword completion first and fallback to omni completion if necessary.
You may define arbitrarily long completion chains, and even filetype-specific
or buffer-specific completion chains.

Sometimes, the first method returning results is not the one you want. With
the pop-up menu visible, you may type <c-h> and <c-j> to cycle back and forth,
respectively, through the current completion chain. In other words, <c-h> and
<c-j> mean: "cancel the current menu and try completing the text I originally
typed in a different way".

If you want completion to be triggered automatically, set
|g:mucomplete#enable_auto_at_startup|.

Note: completion is disabled when 'paste' is on.

In detail, this is the algorithm used by MUcomplete:

1. Retrieve the current completion chain from |b:mucomplete_chain|, if
   defined, otherwise from |g:mucomplete#chains|.

2. For each method listed in the given completion chain:

	 2(a). Check whether the method can be applied by invoking the
	       corresponding function in |g:mucomplete#can_complete|.

	 2(b). If the method can be applied, invoke the corresponding mapping
	       and go to 2(c); otherwise, try the next method.

	 2(c). If some results are returned, show them in a pop-up menu and
	       stop; otherwise, try the next method.

==============================================================================
4. Completion methods				*mucomplete-methods*

MUcomplete supports all the completion methods described in |ins-completion|
(but not all of them are enabled by default; see |g:mucomplete#chains|). Each
method is defined by a string:

"c-n" : keywords in 'complete' (search forwards);
"c-p" : keywords in 'complete' (search backwards);
"cmd" : Vim command line;
"defs": definitions or macros;
"dict": keywords in 'dictionary';
"file": file names;
"incl": keywords in the current and included files;
"keyn": keywords in the current file (search forwards);
"keyp": keywords in the current file (search backwards);
"line": whole lines;
"omni": omni completion ('omnifunc');
"spel": spelling suggestions;
"tags": tags;
"thes": keywords in 'thesaurus';
"user": user defined completion ('completefunc').

Besides, MUcomplete implements its own alternative file completion and
spelling suggestions:

"path": file names (MUcomplete's implementation).
"uspl": spelling suggestions (MUcomplete's implementation).

If you have installed UltiSnips, there is also a method to get suggestions for
snippets (if you use SnipMate, see |mucomplete-compatibility|):

"ulti": UltiSnips snippets.

Note: UltiSnips maps <tab> and <c-j> in a way that conflicts with MUcomplete.
See |mucomplete-compatibility| for a recommended configuration.


Additional completion methods may be defined by the user with
|g:mucomplete#user_mappings|.

==============================================================================
5. Path completion				*mucomplete-path-complete*

MUcomplete provides two different methods to complete file paths: "file" and
"path". The "file" completion method is based on Vim's built-in file
completion and works exactly as |i_CTRL-X_CTRL-F|. A limitation of the
"file" method is that it does not expand paths containing spaces (in
principle, one could add a space to 'isfname', but that is not recommended:
see 'isfname' for the details). Another limitation is that relative paths are
always completed with respect to the current working directory.

MUcomplete also implements its own path completion method, called "path",
which is enabled by default. It differs from "file" because no slash (or
backslash in Windows) is appended when completing a path, and paths with
spaces are expanded correctly. Apart from that, the "path" method still uses
'isfname' to decide which characters define path names. Besides, with the
"path" method it is possible to complete paths relative to the directory of
the current buffer (see |g:mucomplete#buffer_relative_paths|). The "path"
method also honours 'suffixes' and 'wildignore'.

To adjust the case sensitivity of path matching, see 'fileignorecase' and
'wildignorecase'.

See also |mucomplete-tips|.

==============================================================================
6. Spelling suggestions				*mucomplete-spel-complete*

The "spel" method invokes |i_CTRL-X_s| to perform the completion. Such
mapping causes Vim to search for a badly spelled word in the current line
anywhere before the cursor. This is especially puzzling when automatic
completion is on, because Vim's behaviour may make the cursor jump to
a previous, possibly distant, column.

For this reason, MUcomplete implements an alternative completion method,
called "uspl". This still uses Vim's built-in spelling features (see
|spellbadword()| and |spellsuggest()|), but it looks only at the word in front
of the cursor. It also has a couple of options (see
|mucomplete-customization|). This is the recommended spelling method to use,
especially if you enable automatic completion. It is in the default completion
chain, although it is actively used only when 'spell' is on and 'spelllang' is
defined.

==============================================================================
7. Extending completions			*mucomplete-extend-compl*

Vim has a very nice, though possibly not very well known, feature allowing you
to extend the current completion by copying the words following the previous
expansion in other contexts using the current completion method. This works
for |i_CTRL-X_CTRL-N|, |i_CTRL-X_CTRL-P|, |i_CTRL-X_CTRL-D|, |i_CTRL-X_CTRL-I|
and |i_CTRL-X_CTRL-L| (for line completion, whole lines are copied).

MUcomplete streamlines such feature with the help of two functions:
>
	mucomplete#extend_fwd(keys)
	mucomplete#extend_bwd(keys)
<
MUcomplete does not provide mappings by default, though, so you will have to
map those functions in your `vimrc` to enable this feature. The `keys`
argument is the key sequence to use when expanding the mapping in a context
different from completion.

All this is more easily understood with examples rather than words. Try this:
>
	:imap <expr> <right> mucomplete#extend_fwd("\<right>")
	:set completeopt=menuone,noselect
<
	Now type:
>
	Shall I compare thee to a summerâ€™s day?
	S<tab><right><right><right><right><right><right>
<
        Another example:
>
        New Zealand
        New York Times
        Ne<tab><right><tab><right>
<
==============================================================================
8. Commands					*mucomplete-commands*

						*:MUcompleteAutoOn*
Enable automatic completion.

						*:MUcompleteAutoOff*
Disable automatic completion.

						*:MUcompleteAutoToggle*
Toggle automatic completion.

==============================================================================
9. Mappings					*mucomplete-mappings*

By default, MUcomplete maps the keys below in Insert mode. If you do not want
MUcomplete to define any mapping, set |g:mucomplete#no_mappings| or
|no_plugin_maps|. For the definition of each mapping, see |mucomplete-plugs|.

<tab>
	Trigger forward chained completion. When the pop-up menu is visible,
	select the next menu entry or try the next completion method depending
	on the value of |g:mucomplete#cycle_with_trigger|.

<s-tab>
	Trigger backward chained completion. When the pop-up menu is visible,
	select the previous menu entry or try the previous completion method
	depending on the value of |g:mucomplete#cycle_with_trigger|.

<c-j>
	When the pop-up menu is visible, try the next completion method that
	can be applied.

<c-h>
	When the pop-up menu is visible, try the previous completion method
	that can be applied.

The mappings above may be overridden in your |vimrc|. For example, to use
<c-j> and <c-k> instead of <tab> and <s-tab>, use:
>
	imap <c-j> <plug>(MUcompleteFwd)
	imap <c-k> <plug>(MUcompleteBwd)
<
To use <left> and <right> as cycling keys, use:
>
	inoremap <silent> <plug>(MUcompleteFwdKey) <right>
	imap <right> <plug>(MUcompleteCycFwd)
	inoremap <silent> <plug>(MUcompleteBwdKey) <left>
	imap <left> <plug>(MUcompleteCycBwd)
<
Note: if you decide to use your own cycling keys, please be aware that the
keys that are valid in CTRL-X mode are not mapped (see |ins-completion|). This
means, for example, that if you use <c-k> as a cycling key, such mapping will
be shadowed when the pop-up menu is offering dictionary suggestions, because
CTRL-K is already used by Vim during dictionary completion to search for the
next matching keyword (see |i_CTRL-X_CTRL-K|).

The following mappings are defined only in Vim 8.0.0282 or older.

<c-e>
<c-y>
<cr>
    MUcomplete defines a thin wrapper around these keys in Vim 8.0.0282 or
    older, without changing their function. If you want to prevent MUcomplete
    from defining these three mappings, set |g:mucomplete#no_popup_mappings|.
    See also |mucomplete-compatibility| for suggestions on fixing conflicts
    with some popular plugins.

==============================================================================
10. Plugs						*mucomplete-plugs*

<plug>(MUcompleteFwd)
<plug>(MUcompleteBwd)
        These are the plugs that trigger manual forward and backward
        completion, respectively. They are ultimately mapped to the (possibly
        empty) text that completes the current word.
>
	imap <unique> <tab> <plug>(MUcompleteFwd)
	imap <unique> <s-tab> <plug>(MUcompleteBwd)
<
<plug>(MUcompleteCycFwd)
<plug>(MUcompleteCycBwd)
        These are the plugs that trigger forward and backward cycling through
        the completion chain. They are ultimately mapped to the (possibly
        empty) text that completes the current word.
>
	imap <unique> <c-j> <plug>(MUcompleteCycFwd)
	imap <unique> <c-h> <plug>(MUcompleteCycBwd)
<
<plug>(MUcompleteFwdKey)
<plug>(MUcompleteBwdKey)
        These are used to preserve the functionality of the cycling keys in
        contexts different from completion. They must be redefined when
        <plug>(MUcompleteCycFwd) and <plug>(MUcompleteCycBwd) are remapped by
        the user. See |mucomplete-mappings| for an example.

The following plugs are defined only in Vim 8.0.0282 or older.

<plug>(MUcompletePopupCancel)
<plug>(MUcompletePopupAccept)
<plug>(MUcompleteCR)
        These are used to detect when the popup menu is closed with <c-e>,
        <c-y> or <cr>, respectively. They are ultimately mapped to the
        corresponding key (<c-e>, <c-y> and <cr>, respectively).
>
	imap <unique> <c-e> <plug>(MUcompletePopupCancel)
	imap <unique> <c-y> <plug>(MUcompletePopupAccept)
	imap <unique> <cr> <plug>(MUcompleteCR)
<

==============================================================================
11. Customization				*mucomplete-customization*

					*'g:mucomplete#always_use_completeopt'*
By default, 'completeopt' does not affect manual completion (when pressing
<tab> to complete a word, the first match is always automatically selected and
inserted). Set this to 1 if you want manual completion to behave as specified
by the value of 'completeopt'.
>
	let g:mucomplete#always_use_completeopt = 0
<
With this set to 1, you may want to use different values of 'completeopt' for
manual and automatic completion. See |mucomplete-tips| for a possible way to
achieve that.

					*'g:mucomplete#buffer_relative_paths'*
Set to 1 if you want MUcomplete to interpret relative paths as being relative
to the directory of the current buffer. By default, paths are interpreted as
relative to the current working directory (see `:pwd`).
>
	let g:mucomplete#buffer_relative_paths = 0
<
Note: this setting affects only the "path" method, not the "file" method.

						*'g:mucomplete#can_complete'*
A Dictionary defining the conditions that must be satisfied for a given method
to be tried. Each condition is a |lambda|, |function()| or |funcref()| with
one argument (the text to be completed), which returns either 1 or 0,
according to whether the corresponding method should be tried or not. The
argument of such functions consists of |g:mucomplete#look_behind|
characters before the cursor.

When auto-completion is on, by default most completion methods are enabled
when there are at least two keyword characters in front of the cursor (see
'iskeyword'). The exceptions are file and path completions, which look at
a longer portion of the text (whose length is determined by
|g:mucomplete#look_behind|) and "linguistic" methods (dictionary, spelling,
synonyms), which require two (for dictionary) or three (for spelling and
synonyms) alphabetic characters in front of the cursor.

When completion is triggered manually, one non-whitespace character in front
of the cursor is enough to enable all the methods in the current completion
chain, except for spelling and synonyms, which still require three characters.
When |g:mucomplete#empty_text| is set, completion can be triggered with <tab>
even when the cursor is preceded by a space or is located at the start of the
line (this is useful in very limited circumstances).

If no key is found in |g:mucomplete#can_complete| for the current completion
method, such method is tried unconditionally.

The default behaviour described above may be changed for each completion
method or overridden based on the filetype. For example, if you put this in
your |vimrc|:
>
	let s:spl_cond = { t -> &l:spelllang == 'en' && t =~# '\a\{4}$' }
	let s:cpp_cond = { t -> t =~# '\%(->\|::\)$' }
	let g:mucomplete#can_complete = {}
	let g:mucomplete#can_complete.default = { 'uspl': s:spl_cond }
	let g:mucomplete#can_complete.cpp     = { 'omni': s:cpp_cond }
<
then MUcomplete will perform a custom check for "uspl" completion in all
buffers (enabling spelling completion only when the language is English and
there are at least four alphabetic characters in front of the cursor), and
a custom check for "omni" completion in cpp buffers (enabling omni-completion
only after -> and ::). In all the other cases, the default conditions will be
checked.

							*'b:mucomplete_chain'*
A List specifying a completion chain for the current buffer only. When this
variable is defined, the value of |g:mucomplete#chains| is ignored.

							*'g:mucomplete#chains'*
A Dictionary defining the Lists of completion chains.
>
	let g:mucomplete#chains = {
		\ 'default' : ['path', 'omni', 'keyn', 'dict', 'uspl'],
		\ 'vim'     : ['path', 'cmd', 'keyn']
		\ }
<
In your |vimrc|, you may override the default or add filetype-specific
completion chains. For example:
>
	let g:mucomplete#chains = {}
	let g:mucomplete#chains.default  = ['omni', 'c-p']
	let g:mucomplete#chains.markdown = ['keyn', 'dict', 'uspl']
<
						*'g:mucomplete#cycle_all'*
MUcomplete allows you to use specific completion methods only when the trigger
keys are pressed (<tab>/<s-tab> by default), even when auto-completion is on.
This is achieved by testing |g:mucomplete_with_key| in the enabling conditions
of such methods (see |mucomplete-tips| for an example).

When the pop-up menu appears automatically, cycling through the completion
methods with <c-h> and <c-j> ignores manually activated methods by default.
Set this option to 1 to cycle through all the methods in the current
completion chain regardless of whether they are defined to be activated only
manually or not.
>
	let g:mucomplete#cycle_all = 0
<
					*'g:mucomplete#cycle_with_trigger'*
Set to 1 to use <s-tab> and <tab> to move back and forth, respectively,
through the current completion chain when the pop-up menu is visible.
>
	let g:mucomplete#cycle_with_trigger = 0
<
Note: if you set this to 1, you have to use the standard CTRL-N and CTRL-P to
select the entries in the pop-up menu.

					*'g:mucomplete#delayed_completion'*
Set to 1 if you want autocompletion to be triggered only when you pause
typing (autocompletion must be on for this to work). Use |'updatetime'| to set
the delay. See also |CursorHoldI|.
>
	let g:mucomplete#delayed_completion = 0
<
						*'b:mucomplete_empty_text'*
						*'g:mucomplete#empty_text'*
By default, when you press <tab> to complete a word, MUcomplete inserts
a literal Tab character if there is no non-space character before the cursor.
Set this to 1 if you want manual completion to be triggered no matter what the
character in front of the cursor is (|g:mucomplete#can_complete| will still be
applied):
>
	let g:mucomplete#empty_text = 0
<
Setting this variable to 1 is useful in very limited circumstances, e.g., to
trigger omni-completion at the start of a line in some buffer types.

					*'g:mucomplete#enable_auto_at_startup'*
Set to 1 to enable automatic completion at startup.
>
	let g:mucomplete#enable_auto_at_startup = 0
<
						*'g:mucomplete#look_behind'*
This is the maximum number of characters before the cursor that are considered
when deciding which completion methods can be applied.
>
	let g:mucomplete#look_behind = 30
<
Most completion methods require a look-behind no greater than three. The
exception is path completion: to determine whether the text before the cursor
may be a path, MUcomplete needs to find a path separator (or a tilde), which
may occur anywhere before the cursor. This option sets a bound on the time
required for the search, but it also means that, if a path component is very
long, MUcomplete may not trigger path completion. If you are dealing with
paths having path components longer than 30 characters, you may need to
increase the value of this option.

						*'g:mucomplete#no_mappings'*
When set to 1, MUcomplete does not define any mapping.
>
	let g:mucomplete#no_mappings = 0
<
Note: MUcomplete also honours |no_plugin_maps|.

					*'g:mucomplete#no_popup_mappings'*
Set to 1 to prevent MUcomplete from mapping <c-e>, <c-y> and <cr>.

>
	let g:mucomplete#no_popup_mappings = 0
<
You may safely set this variable to 1 if you use manual completion
exclusively. These mappings, however, are necessary for automatic completion
in Vim versions older than v8.0.0283, so if you disable them (likely because
they conflict with some other plugin or with your own mappings), you will need
to provide alternative definitions in your |vimrc|. This is how they are
defined by MUcomplete:
>
	imap <c-e> <plug>(MUcompletePopupCancel)
	imap <c-y> <plug>(MUcompletePopupAccept)
	imap <cr> <plug>(MUcompleteCR)
<
Note: Only for Vim 8.0.0282 or older. MUcomplete does not map <c-e>, <c-y> and
<cr> in recent Vim versions, so this option does nothing in Vim 8.0.0283 or
later.

					*'g:mucomplete#popup_direction'*
>
	let g:mucomplete#popup_direction = {'c-p': -1, 'keyp': -1, 'line': -1}
<
MUcomplete by default follows the "natural" direction of each completion
method. Except for |i_CTRL-X_CTRL-L|, |i_CTRL-P| and |i_CTRL-X_CTRL-P|, Vim
always starts by selecting the first (topmost) entry in the pop-up menu; for
|i_CTRL-X_CTRL-L|, |i_CTRL-P| and |i_CTRL-X_CTRL-P|, though, Vim highlights
the last (bottomost) entry instead. Therefore, when you press <tab> to select
the "next" entry in the pop-up menu, MUcomplete moves downwards in most cases;
for the exceptions mentioned above, though, <tab> moves from bottom to top. In
all cases, you may use <s-tab> to move in the opposite direction.

The default behaviour may be overridden for each completion type by setting
|g:mucomplete#popup_direction| in your |vimrc|. The value of this variable is
a Dictionary mapping completion methods to 1 or -1, where 1 means "select from
top to bottom" and -1 means "select from bottom to top". For instance, if you
want "path" completion to be bottom-to-top, you need to put this in your
|vimrc|:
>
	let g:mucomplete#popup_direction = { 'path' : -1 }
<
If you also want to invert the direction of "c-p" completion, you may write:
>
	let g:mucomplete#popup_direction = { 'path' : -1, 'c-p': 1 }
<
For the completion methods not explicitly mentioned in the value of
|g:mucomplete#popup_direction|, the natural value is assumed, i.e., -1 for
"c-p", "keyp" and "line", and 1 for all the other methods.

					*'g:mucomplete#spel#good_words'*
Set to 1 if you want spelling suggestions (similar words) even for words that
are spelled correctly. By default, no suggestions are returned for good words
by the "uspl" method.
>
	let g:mucomplete#spel#good_words = 0
<
Note: this setting does not affect the "spel" method.

						*'g:mucomplete#spel#max'*
The maximum number of spelling suggestions offered by the "uspl" method.
>
	let g:mucomplete#spel#max = 25
<
Note: this setting does not affect the "spel" method.

				*'g:mucomplete#ultisnips#match_at_start'*
By default, the "ulti" method returns the snippets whose name starts with
the word in front of the cursor. Set this to 0 to return all the snippets that
contain the word in front of the cursor.
>
	let g:mucomplete#ultisnips#match_at_start = 1
<
					*'g:mucomplete#use_only_windows_paths'*
When this option is set, path completion in Windows uses only backslashes.
By default, paths with forward slashes are completed as well.
>
	let g:mucomplete#use_only_windows_paths = 0
<
Note: if 'shellslash' is set, only paths with forward slashes are used, no
matter what the value of this option is.

Note: this option is relevant only for Windows users.

						*'g:mucomplete#user_mappings'*
A Dictionary of user-defined completion methods. For example:
>
	let g:mucomplete#user_mappings = {
			\ 'sqla' : "\<c-c>a",
			\ 'xyz'  : "\<c-r>=MyCustomComplete()\<cr>"
			\ }
<
Each key in the dictionary is an arbitrary string providing the name of the
completion method (but you cannot override the predefined names) and the
corresponding value is the mapping that triggers the desired completion.

User-defined completion methods are used exactly as predefined methods. For
example:
>
	let g:mucomplete#chains = {}
	let g:mucomplete#chains.default = ['keyp', 'xyz']
	let g:mucomplete#chains.sql = ['sqla', 'keyp', 'tags']
<
						*'g:mucomplete_with_key'*
Read-only flag that tells whether completion was initiated manually by the
user or it was triggered automatically. See |mucomplete-tips| for an example.
Note: do not set the value of this variable!

						        *MUcompletePmenu*
You can define this |User| |autocmd|, see |mucomplete-tips| for examples.
>
	autocmd User MUcompletePmenu { called when showing the popup }
<

==============================================================================
12. Tips & tricks					*mucomplete-tips*

How to insert a literal tab character when <tab> is used by MUcomplete? ~
Use CTRL-V <Tab> (or CTRL-Q <Tab> if CTRL-V is mapped). See also |i_<Tab>|.

I want to do something special with <tab> in some circumstances, ~
but I also want to keep using it with MUcomplete. How may I achieve ~
that? ~
You may adapt the following snippet:
>
	fun! MyTabAction()
	  if some_condition_is_verified
	    " Do something
	    return ""
	  else
	    return "\<plug>(MyFwd)"
	  endif
	endf

	imap <plug>(MyFwd) <plug>(MUcompleteFwd)
	imap <expr> <silent> <tab> MyTabAction()
<
MUcomplete does not always insert a new line when I press Enterâ€¦ ~
When the popup menu is closed by pressing <Enter>, sometimes Vim does not
insert a new line. If you always want a new line to be inserted, proceed as
follows. If you use Vim 8.0.0283 or later, put this in your `vimrc`:
>
	inoremap <expr> <cr> pumvisible() ? "<c-y><cr>" : "<cr>"
<
If you use a Vim version older than 8.0.0283, put this in your `vimrc`
instead:
>
	imap <expr> <cr> pumvisible() ? "<c-y><plug>(MUcompleteCR)"
	                              : "<plug>(MUcompleteCR)"
<
How to simulate ZSH behaviour for "file" completion? ~
Some people like ZSH behaviour, whereby typing a slash enters the current
directory. This can be easily achieved by defining the following mapping in
your |vimrc|:
>
	function! IsBehindDir()
	  return strpart(getline('.'), 0, col('.') - 1)  =~# '\f\+/$'
	endfunction

	imap <expr> / pumvisible() && IsBehindDir()
	     \ ? "\<c-y>\<plug>(MUcompleteFwd)"
	     \ : '/'
<
Use different values of completeopt ~
If you want to use different values of 'completeopt' (or other settings) for
manual and automatic completion, you may adapt the following snippet:
>
	fun! ToggleCompleteopt()
	  MUcompleteAutoToggle
	  if exists('#MUcompleteAuto')
	    " Settings for automatic completion
	    set completeopt+=noinsert,noselect
	  else
	    " Settings for manual completion
	    set completeopt-=noinsert,noselect
	  endif
	endf

	command! MyMUcompleteToggle call ToggleCompleteopt()
<
Put the code above in your |vimrc|. Please keep in mind that the value of
'completeopt' is ignored for manual completion (except for spelling
suggestions), unless |'g:mucomplete#always_use_completeopt'| is set to 1.

Enable a completion method only when typing <tab> ~
Some completion methods are inherently slow, and it doesn't make much sense to
trigger them automatically, because they would be called too frequently. Yet,
you might want to trigger them manually by pressing <tab>. This can be
achieved by testing the value of |g:mucomplete_with_key| in a custom check.

For instance, suppose that you are using automatic completion and you want to
use thesaurus completion. Searching for synonyms after each key press would be
too slow (and pointless). To work around this problem, in your |vimrc| you may
define:
>
	let g:mucomplete#can_complete = {}
	let g:mucomplete#can_complete.default = {
	    \  'thes': {
	    \     t -> g:mucomplete_with_key && strlen(&l:thesaurus) > 0
	    \   }
	    \ }
	" Add "thes" to your completion chains, e.g.:
	let g:mucomplete#chains = { 'default': ['keyn', 'thes'] }
<
Then, searching for synonyms will happen only when you press <tab> and keyword
completion returns no results, or when you press <s-tab>. During normal
typing, only keyword completion will be active.

Optimize your completion chains ~
The "c-n", "c-p" and "line" methods allow you to aggregate completion
suggestions from several sources (see 'complete'), including dictionaries and
tags. While this is handy, it may have a couple of drawbacks: first, you may
get too many suggestions, making completion less useful; second, you may incur
an efficiency penalty, especially if you have big tag files or dictionaries or
many included files. This may slows you down noticeably, in particular when
automatic completion is on.

You may optimize your work flow by using longer completion chains and reducing
the options in 'complete' accordingly. For example, instead of:
>
	set completeopt+=i
	set completeopt+=t
	let g:mucomplete#chains = { 'default' : ['c-p'] }
<
which would always scan tags and included files, you might use:
>
	set complete-=i
	set complete-=t
	let g:mucomplete#chains = { 'default' : ['c-p', 'incl', 'tags'] }
<
so that searching included files and/or tags will happen only when
completion cannot be performed otherwise.

Call functions on User events ~
This example shows how you can evoke a message in the command line, to show
the current completion type:
>
	let s:comp_types = {
	    \"c-n" : "keywords in 'complete' (search forwards)",
	    \"c-p" : "keywords in 'complete' (search backwards)",
	    \"cmd" : "Vim command line",
	    \"defs": "definitions or macros",
	    \"dict": "keywords in 'dictionary'",
	    \"file": "file names",
	    \"incl": "keywords in the current and included files",
	    \"keyn": "keywords in the current file (search forwards)",
	    \"keyp": "keywords in the current file (search backwards)",
	    \"line": "whole lines",
	    \"omni": "omni completion ('omnifunc')",
	    \"path": "paths",
	    \"spel": "spelling suggestions",
	    \"tags": "tags",
	    \"thes": "keywords in 'thesaurus'",
	    \"user": "user defined completion ('completefunc')",
	    \"ulti": "Ultisnips",
	    \"uspl": "user-defined spelling suggestions",
	    \... your custom types here
	    \}

	fun! s:mupmenu()
	  let type = g:mucomplete#completion_type
	  echohl Label   | echo "[MUcomplete]\t"
	  echohl Special | echon has_key(s:comp_types, type) ?
			 \ s:comp_types[type] : type.' (custom)'
	  echohl None
	endfun

	augroup mucomplete-user
	  au!
	  autocmd User MUcompletePmenu unsilent call s:mupmenu()
	  autocmd CompleteDone * redraw!
	augroup END
<
Integrate with lightline.vim ~
You could show the current completion type in the statusline instead:
>
	let g:lightline = {
	    \ 'component_function': {
            \   'mode': 'g:lightline.mode',
	    \ },
	    \ }

	let g:lightline.comp_types = {
            \"c-n" : "c-n",
            \"c-p" : "c-p",
            \"cmd" : "vim cmd",
            \"defs": "definitions",
            \"dict": "dictionary",
            \"file": "file names",
            \"incl": "included files",
            \"keyn": "buffer",
            \"keyp": "buffer",
            \"line": "whole lines",
            \"omni": "omni completion",
            \"path": "paths",
            \"spel": "spelling",
            \"tags": "tags",
            \"thes": "thesaurus",
            \"user": "completefunc",
            \"ulti": "Ultisnips",
            \"uspl": "user spelling",
	    \... your custom types here
            \}

	fun! g:lightline.mode() dict
	  if exists('g:mucomplete#completion_type')
	    \ && !empty(g:mucomplete#completion_type)
	    return 'COMPLETE > '.
	       \g:lightline.comp_types[g:mucomplete#completion_type]
	  else
	    return lightline#mode()
	  endif
	endfun

	augroup mucomp
	  au!
	  autocmd User MUcompletePmenu call lightline#update()
	  autocmd CompleteDone * let g:mucomplete#completion_type = ''
	augroup END
<

==============================================================================
13. Compatibility				*mucomplete-compatibility*

MUcomplete tries to be a responsible citizen in Vimland. This section
describes how to make it peacefully coexist with other plugins.

auto-pairs ~
This plugin maps <space> in Insert mode in ways that conflict with
MUcomplete's operation. To resolve the conflict, put this in your |vimrc|:
>
	let g:AutoPairsMapSpace = 0
	imap <silent> <expr> <space> pumvisible()
		\ ? "<space>"
		\ : "<c-r>=AutoPairsSpace()<cr>"
<
If you use Vim 8.0.0282 or older, you must also remap <cr>:
>
	let g:AutoPairsMapCR = 0
	imap <Plug>MyCR <Plug>(MUcompleteCR)<Plug>AutoPairsReturn
	imap <cr> <Plug>MyCR
<
Mapping things this way will also make MUcomplete and auto-pairs work well
together with endwise.vim (see below).

endwise.vim ~
If you use Vim 8.0.0283 or later, MUcomplete works just fine with endwise.

With older versions of Vim, both MUcomplete and endwise map <cr> in Insert
mode, so you must resolve the conflict. The simplest way is to override
MUcomplete's definition of <cr> in your |vimrc|, as follows:
>
    imap <Plug>MyCR <Plug>(MUcompleteCR)
    imap <cr> <Plug>MyCR
<
If you use endwise.vim together with auto-pairs, see the section above
instead.

SnipMate ~
In your |vimrc|, set:
>
	let g:snipMate['no_match_completion_feedkeys_chars'] = ''
<
Then, define a custom completion method:
>
	let g:mucomplete#user_mappings = {
	    \ 'snip' : "\<plug>snipMateShow"
	    \ }
<
and add it to your completion chain(s). For example:
>
	let g:mucomplete#chains = { 'default': ['snip', 'keyn'] }
<
You may also find it convenient to define SnipMate's trigger as follows:
>
	imap <expr> <c-j> (pumvisible() ? "\<c-y>" : "")
	    \             . "\<plug>snipMateNextOrTrigger"
<
so you can expand a snippet while the pop-up menu is still visible. By the
way, if you use <c-j> in the mapping above, do not forget to map
<plug>(MUcompleteCycFwd) (see |mucomplete-mappings|), too, e.g.:
>
	inoremap <silent> <plug>(MUcompleteFwdKey) <right>
	imap <expr> <right> <plug>(MUcompleteCycFwd)
>
otherwise you will get an error at startup:
>
	E227: mapping already exists for ^@
<
because MUcomplete maps <c-j> to <plug>(MUcompleteCycFwd) by default.
Similarly, if you want to use <tab> to expand snippets, you have to map
MUcomplete's manual completion trigger to something else. If MUcomplete's
mappings get too much in the way, you may also disable them completely (see
|g:mucomplete#no_mappings|). Finally, see also |mucomplete-tips| for a more
sophisticated definition of a <tab> mapping.

UltiSnips ~
UltiSnips maps <tab> and <c-j> in a way that conflicts with MUcomplete. The
recommended way to solve the conflict is to redefine UltiSnips's mappings. For
example:
>
	let g:UltiSnipsExpandTrigger = "<f5>"        " Do not use <tab>
	let g:UltiSnipsJumpForwardTrigger = "<c-b>"  " Do not use <c-j>
<
If you want snippets to be expanded automatically when you accept a menu entry
by typing Enter, also add the following code to your `vimrc`:
>
	fun! MyExpandSnippet()
	    if get(v:completed_item, 'menu', '') =~# '[snip]'
	        return UltiSnips#ExpandSnippet()
	    endif
	    return ""  " Or "\<cr>" if you always want to start a new line
	endf

	fun! s:my_cr()
	    return pumvisible()
	        \ ? "\<c-y>\<c-r>=MyExpandSnippet()\<cr>"
	        \ : "\<cr>"
	endf

	inoremap <silent> <expr> <plug>(MyCR) <sid>my_cr()
	imap <cr> <plug>(MyCR)
<
Note: don't forget to add `'ulti'` to your completion chains! For example:
>
	let g:mucomplete#chains = {}
	let g:mucomplete#chains.default = ['path', 'ulti', 'keyn']
<
UltiSnips + PHP ~
In some versions of Vim, there is a (now solved) compatibility issue between
PHP's 'omnifunc' function and UltiSnips. This bug is hit by MUcomplete when:

- automatic completion is on;
- the "omni" method is in your completion chain;
- you try to move between the different parts of a snippet while expanding
  a snippet (and you discover that you can't).

There are two workarounds if you still want to use UltiSnips with PHP:

- remove "omni" from PHP's completion chain;
- disable automatic completion (and do not trigger completion during snippet
  expansion).

Note: this is not a bug in MUcomplete.

vim-peekabo ~
By default, vim-peekabo remaps <c-r> in Insert mode. Since MUcomplete relies
on |i_CTRL-R| in an essential way, you have to change vim-peekabo's mapping:
>
	let g:peekaboo_ins_prefix = '<c-x>'
<
Note: now you need to press <c-x><c-r> to view the registers.

==============================================================================
14. Troubleshooting				*mucomplete-troubleshooting*

Why am I getting the error: "E227: mapping already exists for..."? ~
MUcomplete takes great care not to override an existing mapping defined in
your |vimrc| or by another plugin. If you get this error, it means that
MUcomplete cannot define one of its own mappings, because it is already
defined elsewhere. For example, UltiSnips and Matchem map CTRL-J in Insert
mode, which causes this error as soon as MUcomplete kicks in:
>
	E227: mapping already exists for ^@
<
(^@ is CTRL-J). To discover where the mapping was last defined, use:
>
	:verbose imap <c-j>
<
To fix the conflict, redefine one of the conflicting mappings. See
|mucomplete-mappings| if you decide to override one of MUcomplete's mappings.

I think I have found a bug. What should I do? ~
Before reporting a bug, please do the following:

- In order to rule out conflicts with other settings, please copy
  troubleshooting_vimrc.vim from MUcomplete's directory into your .vim
  directory, edit it, and run Vim with:
>
	 vim -u troubleshooting_vimrc.vim
<
  Can you still reproduce your problem? If not, a conflict with another plugin
  or a setting in your |vimrc| may be the culprit.

- Double-check your completion chains: >

	 echo g:mucomplete#chains
<
  Also, check whether |b:mucomplete_chain| is defined, because its value
  shadows the global dictionary. Are the methods you expect to be used defined
  and in the correct order?

- Some completion methods are enabled conditionally. For example, dictionary
  completion may be triggered only if 'dictionary' is set in the current
  buffer. If you have trouble with a conditionally enabled completion method,
  please check whether the corresponding condition is satisfied (see
  |g:mucomplete#can_complete|).

- Make sure that <c-r> is not mapped in Insert mode. The following command
  should return "No mapping found": >

	 :imap <c-r>
<
- Turn off automatic completion: >

	 :MUcompleteAutoOff
<
  and try to complete a word using the corresponding mapping (see
  |ins-completion| for a list of available mappings). For example, for omni
  completion, use |i_CTRL-X_CTRL-O|. Do you get a different output compared to
  what MUcomplete provides? If not, then the problem is not MUcomplete.

  If triggering completion manually results in the expected behaviour, but
  MUcomplete behaves differently, please report the bug.

==============================================================================
15. Providing feedback					*mucomplete-feedback*

For bug reports and feature requests please use:

	https://github.com/lifepillar/vim-mucomplete/issues

Pull requests are welcome, too!

==============================================================================
16. Implementation details				*mucomplete-internals*

This section describes some technicalities of MUcomplete's implementation, and
is not intended for the regular user: it is mostly a memo for myself and
a reading for those interested in a few subtleties of the source code.

What the hell is <plug>(MUcompleteOut) for? Why is it defined to be ~
<c-g><c-g>? ~
To be able to sequentially try different completion methods, MUcomplete needs
to make sure that Vim is not in |i_CTRL-X| sub-mode before trying a completion
mapping. Since recently, there was no way in Vim to check that. So, the idea
was to use a key sequence that (1) exits CTRL-X sub-mode when Vim is in CTRL-X
submode, and (2) does nothing when typed out of CTRL-X mode. There are a few
such key sequences, and eventually MUcomplete settled to use <c-g><c-g>, as it
is one of the simplest.

What's the purpose of computing an empty string in the value returned by ~
s:next_method()? ~
Well, if you remove that expression (<c-r><c-r>=''<cr>), the completion
mechanism messes up. Honestly, I do not know why :) I suspect it has to do
with type ahead or buffering, but if you can enlighten me, I'd appreciate that
:)

Why is there a double <c-r> in the expression returned by s:next_method()? ~
In principle, one <c-r> should be enough. But using two makes MUcomplete more
robust against interruptions.

A completion mapping may start a long computation (e.g., thesaurus
completion), which the user may want to interrupt by pressing CTRL-C. For some
reason, pressing CTRL-C causes the next character fed to Vim to be eaten
(<c-r>, in this case). I don't know exactly why that happens, but a workaround
is to use <c-r><c-r> instead of just <c-r>. The first <c-r> is then eaten, but
the second one allows the following expression to be evaluated correctly.

Fortunately, although |i_CTRL-R_CTRL-R| and |i_CTRL-R| are not functionally
equivalent, their differences do not matter in the context in which they are
used by MUcomplete.

See also https://github.com/vim/vim/issues/1260.

Why is "cmd" treated specially by s:verify_completion()? ~
Because of a Vim bug. See https://github.com/vim/vim/issues/1319.

Does MUcomplete's implementation have any limitations? ~
Of course! But very few :)
Fuzzy completion is not supported and will likely never be. This doesn't
bother me much, but it might be a showstopper for you.

There is no room for asynchronous computation, given the way MUcomplete is
implemented (how could the fallback mechanism work then?). If you think that
auto-completion should be asynchronous, fortunately there is no lack of
plugins. Do not take it for granted, though, that "asynchronous" means
"faster": in general, the time Vim spends in MUcomplete's code is negligible
compared to the time it takes to populate the popup menu. Asynchronous plugins
typically minimize the impact of the latter task (by delegating it to an async
job), but unless they are carefully implemented, Vim may spend a significant
amount of time running their code. Profile your plugins!

Finally, one thing that does bother me is that MUcomplete cannot exploit the
optimization provided by |complete_add()| and |complete_check()| in user
completion functions (see |E840| for an example). The reason is that
MUcomplete sends a <c-r> immediately after each completion mapping,
effectively preventing further keys to be passed along to the buffer. So,
a user completion function cannot be interrupted by further key presses.
Unfortunately, as discussed above, sending <c-r> is required for
synchronization purposes: without <c-r>, s:verify_completion() may be called
too early, i.e., when the pop-up menu has not appeared yet (but it is going to
appear, because completion was successful).

vim:tw=78:ts=8:norl:

